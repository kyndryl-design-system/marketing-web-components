{"version":3,"file":"848.9946b35f.iframe.bundle.js","mappings":";;AA+OA;AAEA;;;AAKA;AAIA;;;;AAIA;AAEA;AACA;;;;;;AAQA;;;;AAIA;;;;;AAMA;AC9NA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;;AAGA;;AAIA;;;;;AAMA","sources":["webpack://@kyndryl-design-system/shidoka-content/./src/components/patterns/statsCarousel/statsCarousel.ts","webpack://@kyndryl-design-system/shidoka-content/./src/components/patterns/statsCarousel/statsCarouselSlide.ts"],"sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement, query, queryAssignedElements, property, state } from 'lit/decorators.js';\nimport gsap from 'gsap';\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport { debounce } from '@kyndryl-design-system/shidoka-foundation/common/helpers/events';\nimport stylesheet from './statsCarousel.scss';\n\n/**\n * Stats Carousel.\n * Container for Stats Carousel Slide components.\n * The component pins when scrolling into view and unpins after scrolling through all slides.\n * @slot unnamed - Slot for Stat Carousel Slide components.\n */\n@customElement('kd-stats-carousel')\nexport class StatsCarousel extends LitElement {\n\tstatic override styles = stylesheet;\n\n\t/** Short and specific title that describes the data points below it. Max character count: 66 */\n\t@property({ type: String })\n\tcarouselTitle = '';\n\n\t/** Global Color Palette */\n\t@property({ type: String })\n\tcolorPalette = '';\n\n\t/**\n\t * Outer component element that triggers scroll animations.\n\t * @ignore\n\t */\n\t@query('.kd-stats-carousel')\n\tcarousel!: HTMLElement;\n\n\t/**\n\t * Carousel container that gets pinned on scroll.\n\t * @ignore\n\t */\n\t@query('.kd-stats-carousel-container')\n\tcarouselContainer!: HTMLElement;\n\n\t/**\n\t * Container of all slide components.\n\t * @ignore\n\t */\n\t@query('.kd-stats-carousel-slides')\n\tslidesContainer!: HTMLElement;\n\n\t/**\n\t * All Stats Carousel Slide components\n\t * @ignore\n\t */\n\t@queryAssignedElements({ selector: 'kd-stats-carousel-slide' })\n\tslides!: Array<HTMLElement>;\n\n\t/**\n\t * Check mounted state to init ScrollTrigger.\n\t * @ignore\n\t */\n\t@state()\n\tisInit = true;\n\n\t/**\n\t * Track active slide to update pagination dots.\n\t * @ignore\n\t */\n\t@state()\n\tactiveSlideIndex = 0;\n\n\t/**\n\t * Delay resetting view until repaint completes.\n\t * @ignore\n\t */\n\tprivate resetDelay = 300;\n\n\t/**\n\t * Base gsap animation duration for each slide\n\t * @ignore\n\t */\n\tprivate animDuration = 1;\n\n\toverride connectedCallback() {\n\t\tsuper.connectedCallback();\n\t\tgsap.registerPlugin(ScrollTrigger);\n\n\t\t// wait until resize ends to reset the view\n\t\twindow.addEventListener('resize', debounce(() => {\n\t\t\t\tthis.resetView();\n\t\t\t})\n\t\t);\n\t}\n\n\thandleSlotChange() {\n\t\t// only init carousel after elements are defined\n\t\tif (this.isInit) {\n\t\t\tthis.setHeight();\n\t\t\tthis.initScrollTrigger();\n\t\t\tthis.isInit = false;\n\t\t}\n\t}\n\n\tprivate resetView() {\n\t\tthis.removeHeight();\n\n\t\t// delay setting height to allow repaint to finish\n\t\tsetTimeout(() => {\n\t\t\tthis.setHeight();\n\t\t\tScrollTrigger.refresh();\n\t\t}, this.resetDelay);\n\t}\n\n\tprivate setHeight() {\n\t\tconst slideHeights: number[] = [];\n\n\t\t// set the overall scrolling height\n\t\tthis.carousel.style.minHeight = `${this.slides.length * 100}vh`;\n\n\t\t// get each slide height\n\t\tthis.slides.forEach((slide) => {\n\t\t\tslide.style.height = 'auto';\n\t\t\tslide.style.minHeight = 'auto';\n\t\t\tslideHeights.push(slide.offsetHeight);\n\t\t});\n\n\t\t// get the tallest slide height\n\t\tconst maxHeight: number = Math.max(...(slideHeights));\n\n\t\t// set heights\n\t\tthis.slides.forEach((slide) => {\n\t\t\tslide.style.height = `${maxHeight}px`;\n\t\t\tslide.style.minHeight = `${maxHeight}px`;\n\t\t\tslide.style.position = 'absolute';\n\t\t\tslide.style.width = '100%';\n\t\t});\n\n\t\tthis.slidesContainer.style.height = `${maxHeight}px`;\n\t}\n\n\t// remove element height, so we can recalculate it on window resize\n\tprivate removeHeight() {\n\t\tthis.slidesContainer.style.removeProperty('height');\n\n\t\tthis.slides.forEach((slide) => {\n\t\t\tslide.style.removeProperty('height');\n\t\t\tslide.style.removeProperty('min-height');\n\t\t});\n\t}\n\n\t// create tween in animation (function used to prevent animating on init)\n\tprivate getTweenIn(slide: HTMLElement, i: number) {\n\t\treturn gsap.fromTo(slide, {\n\t\t\tautoAlpha: 0,\n\t\t\ty: '50%',\n\t\t}, {\n\t\t\tautoAlpha: 1,\n\t\t\ty: 0,\n\t\t\tease: 'power2.inOut',\n\t\t\tduration: this.animDuration,\n\t\t\tonStart: () => {\n\t\t\t\tthis.activeSlideIndex = i;\n\t\t\t},\n\t\t\tonReverseComplete: () => {\n\t\t\t\tthis.activeSlideIndex = i - 1;\n\t\t\t},\n\t\t});\n\t}\n\n\t// create tween out animation (function used to prevent animating on init)\n\tprivate getTweenOut(slide: HTMLElement) {\n\t\treturn gsap.fromTo(slide, {\n\t\t\tautoAlpha: 1,\n\t\t\ty: 0,\n\t\t}, {\n\t\t\tautoAlpha: 0,\n\t\t\ty: '-50%',\n\t\t\tease: 'power2.inOut',\n\t\t\tduration: this.animDuration,\n\t\t});\n\t}\n\n\t// create empty tween to delay next slide animation (function used to prevent animating on init)\n\tprivate getTweenSpacer() {\n\t\treturn gsap.to({},  {\n\t\t\tduration: this.animDuration * 3,\n\t\t});\n\t}\n\n\tprivate initScrollTrigger() {\n\t\tconst slidesTimeline = gsap.timeline();\n\n\t\tthis.slides.forEach((slide, i: number) => {\n\t\t\t// don't animate first slide in\n\t\t\tif (i !== 0) {\n\t\t\t\tslidesTimeline.add(this.getTweenIn(slide, i));\n\t\t\t}\n\n\t\t\t// don't animate last slide out\n\t\t\tif (i !== this.slides.length - 1) {\n\t\t\t\tslidesTimeline.add(this.getTweenOut(slide), `+=${this.animDuration}`);\n\t\t\t}\n\n\t\t\t// add spacer after last slide for timing\n\t\t\tif (i === this.slides.length - 1) {\n\t\t\t\tslidesTimeline.add(this.getTweenSpacer());\n\t\t\t}\n\t\t});\n\n\t\t// fix scroll behavior on Storybook docs preview\n\t\tconst elDocsStory = this.closest('.docs-story');\n\t\tconst elDocsStoryContainer = elDocsStory?.querySelector<HTMLElement>('.innerZoomElementWrapper');\n\t\tif (elDocsStoryContainer) {\n\t\t\telDocsStoryContainer.style.height = '50vh';\n\t\t\telDocsStoryContainer.style.overflow = 'auto';\n\t\t}\n\n\t\tScrollTrigger.create({\n\t\t\tscroller: elDocsStoryContainer ? elDocsStoryContainer : window,\n\t\t\ttrigger: this.carousel,\n\t\t\t// offset the center positions so the content is center aligned in viewport\n\t\t\tstart: () => {\n\t\t\t\tconst centerOffset = `${this.carouselContainer.offsetHeight / 2}px`;\n\t\t\t\treturn `top center-=${centerOffset}`;\n\t\t\t},\n\t\t\tend: () => {\n\t\t\t\tconst centerOffset = `${this.carouselContainer.offsetHeight / 2}px`;\n\t\t\t\treturn `bottom center+=${centerOffset}`;\n\t\t\t},\n\t\t\tpin: this.carouselContainer,\n\t\t\tscrub: 0,\n\t\t\tmarkers: false,\n\t\t\tanimation: slidesTimeline,\n\t\t});\n\t}\n\n\t/**\n\t * Render pagination dots with active class based on activeSlideIndex.\n\t * @ignore\n\t */\n\tprivate get renderPagination() {\n\t\treturn html`\n\t\t\t<div class=\"kd-stats-carousel-pagination\">\n\t\t\t\t${this.slides.map((_slide, i) => {\n\t\t\t\t\treturn html`\n\t\t\t\t\t\t<div class=\"kd-stats-carousel-pagination-item ${i === this.activeSlideIndex ? 'is-active' : ''}\"></div>\n\t\t\t\t\t`\n\t\t\t\t})}\n\t\t\t</div>\n\t\t`\n\t}\n\n\toverride render() {\n\t\treturn html`\n\t\t\t<div class=\"kd-stats-carousel ${this.colorPalette}\">\n\t\t\t\t<div class=\"kd-stats-carousel-container\">\n\t\t\t\t\t<div class=\"kd-grid\">\n\t\t\t\t\t\t<div class=\"kd-stats-carousel-col kd-grid__col--sm-4 kd-grid__col--md-6 kd-grid__col--lg-10\">\n\t\t\t\t\t\t\t${this.carouselTitle ?\n\t\t\t\t\t\t\t\thtml`\n\t\t\t\t\t\t\t\t\t<h2 class=\"kd-stats-carousel-title kd-type--headline-06\">${this.carouselTitle}</h2>\n\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"kd-grid\">\n\t\t\t\t\t\t<div class=\"kd-stats-carousel-col kd-grid__col--sm-4 kd-grid__col--md-6 kd-grid__col--lg-10\">\n\t\t\t\t\t\t\t<div class=\"kd-stats-carousel-slides\">\n\t\t\t\t\t\t\t\t<slot @slotchange=${this.handleSlotChange}></slot>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"kd-grid__col--sm-4 kd-grid__col--md-1\">\n\t\t\t\t\t\t\t${this.renderPagination}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\t}\n}\n\ndeclare global {\n\tinterface HTMLElementTagNameMap {\n\t\t'kd-stats-carousel': StatsCarousel;\n\t}\n}\n","import { html, LitElement, TemplateResult } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { STAT_CAROUSEL_SLIDE_SYMBOL_POSITIONS, STAT_CAROUSEL_SLIDE_SYMBOL_ALIGNMENT } from './defs';\nimport stylesheet from './statsCarouselSlide.scss';\n\n/**\n * Stats Carousel Slide.\n * Component to be used within a Stats Carousel container component.\n * @slot unnamed - Slot for description text that provides additional or important details that describes further about the numerical value. Optimal character count: 110-160\n */\n@customElement('kd-stats-carousel-slide')\nexport class StatsCarouselSlide extends LitElement {\n\tstatic override styles = stylesheet;\n\n\t/** Stat value should be a number, but it can include a symbol (e.g. $100). Max character count: 7 */\n\t@property({ type: String })\n\tstat = '';\n\n\t/** Symbol associated with the numerical value (>, <, %, $) or letters representing thousand (k), million (M) or billion (B). Max character count: 1 */\n\t@property({ type: String })\n\tsymbol = '';\n\n\t/** Symbol placement before or after the stat value. */\n\t@property({ type: String })\n\tsymbolPlacement: string = STAT_CAROUSEL_SLIDE_SYMBOL_POSITIONS.BEFORE;\n\n\t/** Vertical alignment of symbol. */\n\t@property({ type: String })\n\tsymbolAlignment: string = STAT_CAROUSEL_SLIDE_SYMBOL_ALIGNMENT.SUPERSCRIPT;\n\n\t/**\n\t * Render the stat based on selected options.\n\t * @ignore\n\t */\n\tprivate get renderStat() {\n\t\tlet classAlignment: string;\n\t\tswitch (this.symbolAlignment) {\n\t\t\tcase STAT_CAROUSEL_SLIDE_SYMBOL_ALIGNMENT.CENTER:\n\t\t\t\tclassAlignment = 'is-center';\n\t\t\t\tbreak;\n\t\t\tcase STAT_CAROUSEL_SLIDE_SYMBOL_ALIGNMENT.SUBSCRIPT:\n\t\t\t\tclassAlignment = 'is-subscript';\n\t\t\t\tbreak;\n\t\t\tcase STAT_CAROUSEL_SLIDE_SYMBOL_ALIGNMENT.SUPERSCRIPT:\n\t\t\tdefault:\n\t\t\t\tclassAlignment = '';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet stat: TemplateResult;\n\t\tswitch (this.symbolPlacement) {\n\t\t\tcase STAT_CAROUSEL_SLIDE_SYMBOL_POSITIONS.AFTER:\n\t\t\t\tstat = html`\n\t\t\t\t\t<div class=\"kd-stats-carousel-slide-stat kd-type--hero-04 kd-type--weight-bold\">${this.stat}</div>\n\t\t\t\t\t<div class=\"kd-stats-carousel-slide-symbol kd-type--headline-01 kd-type--weight-regular\">${this.symbol}</div>\n\t\t\t\t`\n\t\t\t\tbreak;\n\t\t\tcase STAT_CAROUSEL_SLIDE_SYMBOL_POSITIONS.BEFORE:\n\t\t\tdefault:\n\t\t\t\tstat = html`\n\t\t\t\t\t<div class=\"kd-stats-carousel-slide-symbol kd-type--headline-01 kd-type--weight-regular\">${this.symbol}</div>\n\t\t\t\t\t<div class=\"kd-stats-carousel-slide-stat kd-type--hero-04 kd-type--weight-bold\">${this.stat}</div>\n\t\t\t\t`\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn html`\n\t\t\t<div class=\"kd-stats-carousel-slide-stat-container ${classAlignment}\">\n\t\t\t\t${stat}\n\t\t\t</div>\n\t\t`\n\t}\n\toverride render() {\n\t\treturn html`\n\t\t\t<div class=\"kd-stats-carousel-slide\">\n\t\t\t\t${this.renderStat}\n\t\t\t\t<div class=\"kd-stats-carousel-slide-description kd-type--body-01\">\n\t\t\t\t\t<slot></slot>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\t}\n}\n\ndeclare global {\n\tinterface HTMLElementTagNameMap {\n\t\t'kd-stats-carousel-slide': StatsCarouselSlide;\n\t}\n}\n"],"names":[],"sourceRoot":""}